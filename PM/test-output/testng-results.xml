<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="1" passed="0">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="8272" started-at="2019-08-24T06:12:53Z" finished-at="2019-08-24T06:13:01Z">
    <groups>
    </groups>
    <test name="Test" duration-ms="8272" started-at="2019-08-24T06:12:53Z" finished-at="2019-08-24T06:13:01Z">
      <class name="tests.PM_Extension_Test">
        <test-method status="PASS" signature="beforeSuite()[pri:0, instance:tests.PM_Extension_Test@6e1ec318]" name="beforeSuite" is-config="true" duration-ms="1159" started-at="2019-08-24T06:12:52Z" finished-at="2019-08-24T06:12:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:tests.PM_Extension_Test@6e1ec318]" name="beforeClass" is-config="true" duration-ms="6435" started-at="2019-08-24T06:12:53Z" finished-at="2019-08-24T06:13:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:tests.PM_Extension_Test@6e1ec318]" name="beforeMethod" is-config="true" duration-ms="30" started-at="2019-08-24T06:13:00Z" finished-at="2019-08-24T06:13:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="test_create_IP_extension(java.lang.reflect.Method)[pri:0, instance:tests.PM_Extension_Test@6e1ec318]" name="test_create_IP_extension" duration-ms="24" started-at="2019-08-24T06:13:00Z" finished-at="2019-08-24T06:13:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.PM_Extension_Test.test_create_IP_extension(java.lang.reflect.Method) throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
at utilities.ExcelReadAndWrite.checkTestStatus(ExcelReadAndWrite.java:119)
at tests.PM_Extension_Test.test_create_IP_extension(PM_Extension_Test.java:40)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_create_IP_extension -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:tests.PM_Extension_Test@6e1ec318]" name="afterMethod" is-config="true" duration-ms="148" started-at="2019-08-24T06:13:00Z" finished-at="2019-08-24T06:13:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=test_create_IP_extension status=FAILURE method=PM_Extension_Test.test_create_IP_extension(java.lang.reflect.Method)[pri:0, instance:tests.PM_Extension_Test@6e1ec318] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:tests.PM_Extension_Test@6e1ec318]" name="afterClass" is-config="true" duration-ms="1576" started-at="2019-08-24T06:13:00Z" finished-at="2019-08-24T06:13:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
        <test-method status="PASS" signature="afterSuite()[pri:0, instance:tests.PM_Extension_Test@6e1ec318]" name="afterSuite" is-config="true" duration-ms="0" started-at="2019-08-24T06:13:01Z" finished-at="2019-08-24T06:13:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
      </class> <!-- tests.PM_Extension_Test -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
